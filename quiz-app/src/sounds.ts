// Base64 encoded short audio clips for better portability
const SOUNDS = {
  correct: 'data:audio/mp3;base64,//OEZAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAKAAAIyAAGBgYGBgYGBgYcHBwcHBwcHBw4ODg4ODg4ODhTU1NTU1NTU1NsbGxsbGxsbGyEhISEhISEhISenp6enp6enp62tra2tra2trbPz8/Pz8/Pz8/o6Ojo6Ojo6Oj///////////8AAAA5TEFNRTMuOTlyAm4AAAAALgkAABRGJAN7TgAARgAACMgaJ6RDAAAAAAAAAAAAAAAAAAAA//OEZAANCD9CBc08AFB4OkLfmsABVTJYcKy/TC3KBIJBsMwwzh9EglDOHDgQBHygIAgCAIA+D4f/lAQBAEAQDHygIAgCAIf/EMwfP//5Q/iAIAgCHwQBAEAQDH/8o+H/KAgCAIAgD4Pg+D4f///+sEAQBEOIYRmYRhGwjCNFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
  incorrect: 'data:audio/mp3;base64,//OEZAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAJAAAIyAAGBgYGBgYGBgYaGhoaGhoaGho1NTU1NTU1NTVOTk5OTk5OTk5nZ2dnZ2dnZ2eAgICAgICAgICZmZmZmZmZmZmysrKysrKysrLMzMzMzMzMzMzl5eXl5eXl5eX///////////8AAAA5TEFNRTMuOTlyAm4AAAAALiEAABRGJANkTgAARgAACMgWLqRjAAAAAAAAAAAAAAAAAAAA//OEZAANCD9CBc08AFBwOkK/msABQzVYcQ0rTC3KBIJBsMwwzh9EglDOHDgQBHygIAgCAIA+D4f/lAQBAEAQDHygIAgCAIf/EMwfP//5Q/iAIAgCHwQBAEAQDH/8o+H/KAgCAIAgD4Pg+D4f///+sEAQBEOIYRmYRhGwjCNFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
  tick: 'data:audio/mp3;base64,//OEZAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAIAAAI8AAFBQUFBQUFBQUPDw8PDw8PDw8YGBgYGBgYGBgiIiIiIiIiIiIsLCwsLCwsLCw2NjY2NjY2Njb///////////8AAAA5TEFNRTMuOTlyAm4AAAAALiUAABRGJAOATgAARgAACPAeQbRDAAAAAAAAAAAAAAAAAAAA//OEZAANCD9CBc08AFBwOkLfmsABQzVYcQ0rTC3KBIJBsMwwzh9EglDOHDgQBHygIAgCAIA+D4f/lAQBAEAQDHygIAgCAIf/EMwfP//5Q/iAIAgCHwQBAEAQDH/8o+H/KAgCAIAgD4Pg+D4f///+sEAQBEOIYRmYRhGwjCNFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
  victory: 'data:audio/mp3;base64,//OEZAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAALAAAL8AAFBQUFBQUFBQUQEBAQEBAQEBAbGxsbGxsbGxtAQEBAQEBAQEBQUFBQUFBQUFBgYGBgYGBgYGBwcHBwcHBwcHCAgICAgICAgICQkJCQkJCQkJD///////////8AAAA5TEFNRTMuOTlyAm4AAAAALjUAABRGJAOUTgAARgAAC/A0F8RDAAAAAAAAAAAAAAAAAAAA//OEZAANCD9CBc08AFBwOkLfmsABQzVYcQ0rTC3KBIJBsMwwzh9EglDOHDgQBHygIAgCAIA+D4f/lAQBAEAQDHygIAgCAIf/EMwfP//5Q/iAIAgCHwQBAEAQDH/8o+H/KAgCAIAgD4Pg+D4f///+sEAQBEOIYRmYRhGwjCNFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
};

class SoundManager {
  private audioElements: { [key: string]: HTMLAudioElement } = {};
  private isMuted: boolean = false;

  constructor() {
    // Create an audio element for each sound
    Object.entries(SOUNDS).forEach(([key, value]) => {
      const audio = new Audio(value);
      audio.preload = 'auto';
      this.audioElements[key] = audio;
    });
  }

  playSound(soundType: keyof typeof SOUNDS) {
    if (this.isMuted) return;
    
    try {
      // Create a new audio element each time to allow overlapping sounds
      const audio = new Audio(SOUNDS[soundType]);
      audio.volume = 1;
      audio.play().catch((error) => {
        console.log('Audio playback failed:', error);
      });
    } catch (error) {
      console.log('Error playing sound:', error);
    }
  }

  toggleMute() {
    this.isMuted = !this.isMuted;
    return this.isMuted;
  }

  setMute(mute: boolean) {
    this.isMuted = mute;
  }
}

export const soundManager = new SoundManager(); 